using Agende.Business.Interfaces.Repositories;
using Agende.Business.Enums;
using Agende.Data.Context;
using Agende.Business.Models;
using Agende.Data.Repositories.Base;

using Microsoft.EntityFrameworkCore;

using System.Data;

namespace Agende.Data.Repositories;
public class CompanyRepository : Repository<Company>, ICompanyRepository
{
    public CompanyRepository(ApplicationDbContext context) : base(context)
    {
    }
    public override async Task<Company> GetByIdAsync(string id, bool active = true)
    {
        var query = DbSet
            .Include(c => c.OpeningHours)
            .Include(c => c.ServicesOffered)
            .Where(c => c.Id == id);

        if (!active)
            query = query.IgnoreQueryFilters();

        return await query.FirstOrDefaultAsync();
    }
    public override Task SaveAsync(Company entity)
    {
        return base.SaveAsync(entity);
    }
    public override void BeforeUpdateChanges(Company entity)
    {
        var entry = DbSet.Entry(entity);
        entry.Property("ImagePrompt").IsModified = false;
        entry.Property("AutoGeneratedImage").IsModified = false;

        UpdateCollection(entity.ServicesOffered);
        UpdateCollection(entity.OpeningHours);
    }
    public override async Task<IEnumerable<Company>> GetAllAsync(bool active = true)
    {
        var query = DbSet
            .Include(c => c.OpeningHours)
            .Include(c => c.ServicesOffered).AsQueryable();

        if (!active)
            query = query.IgnoreQueryFilters();

        return await query.ToListAsync();
    }
    public async Task<IEnumerable<Company>> GetCompaniesByUserAsync(string userId)
    {
        return await DbSet
            .IgnoreQueryFilters()
            .Include(c => c.Employeers)
            .Where(c => c.Employeers.Any(c => c.UserId == userId) && c.Status != StatusEnum.Removed)
            .OrderBy(c => c.Status == StatusEnum.Active).ThenBy(c => c.Name)
            .ToListAsync();
    }

    public async Task TemporaryDeleteAsync(string id)
    {
        var entity = await GetAsync(id);
        entity.ScheduleStatus = ScheduleStatusEnum.Closed;
        entity.Status = StatusEnum.TemporaryRemoved;
        entity.InactiveDate = DateTime.Now;

        await base.TemporaryDeleteAsync(entity);
    }

    public async Task<IEnumerable<Company>> GetAllOpen()
    {
        return await DbSet
        .Where(c => c.ScheduleStatus == ScheduleStatusEnum.Open)
        .ToListAsync();
    }

    public async Task ReactiveAsync(string id)
    {
        var company = await GetAsync(id, active: false);
        company.Status = StatusEnum.Active;
        company.ScheduleStatus = ScheduleStatusEnum.Closed;
        company.InactiveDate = null;
        
        await base.SaveAsync(company);
    }
}